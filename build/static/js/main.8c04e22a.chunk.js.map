{"version":3,"sources":["redux/reducers/errors.reducer.js","redux/reducers/user.reducer.js","redux/reducers/planCount.reducer.js","redux/reducers/totalactions.reducer.js","redux/reducers/imperator.reducer.js","redux/reducers/monthlyusers.reducer.js","redux/reducers/singleCompany.reducer.js","redux/reducers/singleCompanyUsers.reducer.js","redux/reducers/strategic.reducer.js","redux/reducers/aureliusUserSearch.reducer.js","redux/reducers/_root.reducer.js","redux/sagas/login.saga.js","redux/sagas/registration.saga.js","redux/sagas/user.saga.js","redux/sagas/operational.saga.js","redux/sagas/imperator.saga.js","redux/sagas/singleCompany.saga.js","redux/sagas/passwordReset.saga.js","redux/sagas/strategic.saga.js","redux/sagas/analyticsAllUserSearch.saga.js","redux/sagas/_root.saga.js","components/Nav/Nav.js","components/LoginForm/LoginForm.tsx","components/LoginPage/LoginPage.tsx","redux/mapStoreToProps.js","components/ProtectedRoute/ProtectedRoute.js","components/RegisterForm/RegisterForm.js","components/RegisterPage/RegisterPage.js","components/Operational/BarGraph.js","components/Operational/MonthlyUsers.js","components/Operational/PlanTypeGraph.js","components/Operational/Operational.js","components/Analytical/singleCompanyGraph.js","components/Analytical/userCard.js","components/Analytical/allUserSearch.js","components/Analytical/allCompanyGraph.js","components/Analytical/GDPRDeleteButton.js","components/Analytical/AnalyticalUsers.js","components/Analytical/companyInfo.js","components/Analytical/Analytical.js","components/Imperator/Table.js","components/Imperator/Imperator.js","components/Strategic/StrategicGraph.js","components/Strategic/Strategic.js","components/PasswordReset/PasswordReset.tsx","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","action","type","registrationMessage","userReducer","payload","planCount","initState","Total_Companies","documents","count","hashtags","insights","notes","projects","totalActions","imperator","monthlyUsersOverTime","singleCompanyData","singleCompanyUsers","paidPlans","trialPlans","strategicGraph","aureliusUserSearch","rootReducer","errors","user","totalAction","strategic","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","fetchUser","userSaga","get","data","fetchTotalCounts","fetchTotalActions","getUsersByMonth","operationalSaga","year","takeEvery","fetchImperatorData","fetchCompanySearch","imperatorSaga","getSingleCompanyData","editCustomerId","fetchCompanyUsers","singleCompanySaga","param","id","companyId","resetPassword","passwordResetSaga","getPlanAverage","getPaidPlans","getTrialPlans","sendEmail","strategicSaga","fetchUserByEmail","editUserEmail","analyticalUserSearchSaga","search","rootSaga","all","Nav","props","useSelector","redux","dispatch","useDispatch","React","useState","open","setOpen","loginLinkData","path","text","_id","className","onClick","src","alt","to","LoginForm","username","password","setUser","useHistory","onSubmit","event","preventDefault","role","htmlFor","name","required","value","onChange","e","target","LoginPage","mapStoreToProps","reduxState","store","connect","ComponentToProtect","component","authRedirect","otherProps","ComponentToShow","exact","from","RegisterForm","newUser","setNewUser","RegisterPage","BarGraph","useEffect","options","chart","height","plotOptions","bar","horizontal","distributed","colors","dataLabels","enabled","offsetY","style","fontSize","series","xaxis","categories","position","axisBorder","show","axisTicks","labels","crosshairs","fill","gradient","colorFrom","colorTo","stops","opacityFrom","opacityTo","legend","opt","width","MonthlyUsers","setYear","zoom","stroke","curve","yaxis","opposite","horizontalAlign","monthsData","textAlign","padding","map","PlanTypeGraph","donut","total","label","planTotal","reduce","item","enterprisePercentage","trialPercentage","premiumPercentage","proPercentage","Operational","SingleCompanyGraph","location","useRouteMatch","allCompanyData","companyUsers","params","columnWidth","endingShape","title","opacity","tooltip","y","formatter","val","singleCompanyActions","projectsTotal","insightsTotal","documentsTotal","hashtagsTotal","notesTotal","companyName","company","UserCard","editMode","setEditMode","firstname","lastname","email","newEmail","setNewEmail","initEmail","Swal","fire","icon","heightAuto","showCancelButton","confirmButtonText","cancelButtonText","then","result","dismiss","DismissReason","cancel","AllUserSearch","userSearch","setSearch","placeholder","i","AllCompanyGraph","totalActionData","actions","GDPRDeleteButton","buttonProperties","setButtonProperties","buttonInputValue","setButtonInputValue","userEmail","swal","dangerMode","buttons","content","element","AnalyticalUsers","users_data","CompanyInfo","companyInfo","customerId","setCustomerId","billing","plan","initCustomerId","format","activeUntil","jira","zapier","Analytical","graph","setGraph","setCompanyInfo","allUserSearch","setAllUserSearch","checkSingleOrAll","Table","pageCount","controlledPageCount","history","getConfig","columns","useMemo","Header","accessor","Cell","cell","row","values","goToAnalytical","custom_date","formatData","aria-hidden","display","useTable","initialState","pageIndex","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","pageSize","date","split","Date","parse","toString","replace","push","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","getCellProps","disabled","length","defaultValue","Number","Imperator","StrategicGraph","enterprise","avgLength","premium","pro","Strategic","paidPlan","trialPlan","month","day","PasswordReset","confirm","setEmail","sagaMiddleware","createSagaMiddleware","middlewareList","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8c04e22a.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\n// loginMessage holds the string that will display\r\n// on the login screen if there's an error\r\nconst loginMessage = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'CLEAR_LOGIN_ERROR':\r\n      return '';\r\n    case 'LOGIN_INPUT_ERROR':\r\n      return 'Enter your username and password!';\r\n    case 'LOGIN_FAILED':\r\n      return \"Oops! The username and password didn't match. Try again!\";\r\n    case 'LOGIN_FAILED_NO_CODE':\r\n      return 'Oops! Something went wrong! Is the server running?';\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// registrationMessage holds the string that will display\r\n// on the registration screen if there's an error\r\nconst registrationMessage = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'CLEAR_REGISTRATION_ERROR':\r\n      return '';\r\n    case 'REGISTRATION_INPUT_ERROR':\r\n      return 'Choose a username and password!';\r\n    case 'REGISTRATION_FAILED':\r\n      return \"Oops! That didn't work. The username might already be taken. Try again!\";\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// make one object that has keys loginMessage, registrationMessage\r\n// these will be on the redux state at:\r\n// state.errors.loginMessage and state.errors.registrationMessage\r\nexport default combineReducers({\r\n  loginMessage,\r\n  registrationMessage,\r\n});\r\n","const userReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return action.payload;\r\n    case 'UNSET_USER':\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// user will be on the redux state at:\r\n// state.user\r\nexport default userReducer;\r\n","\r\nconst planCount = (state = [] , action) => {\r\n  switch (action.type) {\r\n    case 'SET_PLAN_COUNT':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default planCount;\r\n","// store user message information\r\nconst initState = {\r\n  Total_Companies: 0,\r\n  documents: {\r\n    count: 0,\r\n  },\r\n  hashtags: {\r\n    count: 0,\r\n  },\r\n  insights: {\r\n    count: 0,\r\n  },\r\n  notes: {\r\n    count: 0,\r\n  },\r\n  projects: {\r\n    count: 0,\r\n  },\r\n};\r\n\r\nconst totalActions = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_TOTAL_ACTIONS':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default totalActions;\r\n","// store imperator data for the table\r\nconst imperator = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_IMPERATOR':\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default imperator;\r\n","// store imperator data for the table\r\nconst monthlyUsersOverTime = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'SET_MONTHLY_USERS':\r\n        return action.payload;\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n  \r\nexport default monthlyUsersOverTime;","// store imperator data for the table\r\nconst singleCompanyData = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case 'SET_SINGLE_COMPANY_DATA':\r\n        return action.payload;\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n  \r\nexport default singleCompanyData;","const singleCompanyUsers = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'SET_SINGLE_COMPANY_USERS':\r\n        return action.payload;\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default singleCompanyUsers;","import { combineReducers } from 'redux';\r\n\r\n// store paid plans ending this month\r\nconst paidPlans = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'SET_PAID_PLANS':\r\n        return action.payload;\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n\r\n// store trial plans ending this month\r\nconst trialPlans = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'SET_TRIAL_PLANS':\r\n        return action.payload;\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n\r\nconst strategicGraph = (state = [] , action) => {\r\n    switch (action.type) {\r\n      case 'SET_PLAN_LENGTH_AVERAGE':\r\n        return action.payload;\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n\r\n\r\nexport default combineReducers({\r\n  paidPlans,\r\n  trialPlans,\r\n  strategicGraph\r\n});","const aureliusUserSearch = (state = [], action) => {\r\n    switch (action.type) {\r\n      case 'SET_AURELIUS_USERS_SEARCH':\r\n        return action.payload;\r\n      case 'CLEAR_USER_SEARCH':\r\n        return state = [];\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default aureliusUserSearch;","import { combineReducers } from 'redux';\r\nimport errors from './errors.reducer';\r\nimport user from './user.reducer';\r\nimport planCount from './planCount.reducer';\r\nimport totalAction from './totalactions.reducer';\r\nimport imperator from './imperator.reducer';\r\nimport monthlyUsersOverTime from './monthlyusers.reducer';\r\nimport singleCompanyData from './singleCompany.reducer';\r\nimport singleCompanyUsers from './singleCompanyUsers.reducer';\r\nimport strategic from './strategic.reducer'\r\nimport aureliusUserSearch from './aureliusUserSearch.reducer'\r\n// rootReducer is the primary reducer for our entire project\r\n// It bundles up all of the other reducers so our project can use them.\r\n// This is imported in index.js as rootSaga\r\n\r\n// Lets make a bigger object for our store, with the objects from our reducers.\r\n// This is what we get when we use 'state' inside of 'mapStateToProps'\r\nconst rootReducer = combineReducers({\r\n  errors, // contains registrationMessage and loginMessage\r\n  user, // will have an id and username if someone is logged in\r\n  planCount,\r\n  totalAction,\r\n  imperator,\r\n  monthlyUsersOverTime,\r\n  strategic, \r\n  singleCompanyData,\r\n  singleCompanyUsers,\r\n  aureliusUserSearch\r\n});\r\n\r\nexport default rootReducer;\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n// worker Saga: will be fired on \"LOGIN\" actions\r\nfunction* loginUser(action) {\r\n  try {\r\n    // clear any existing error on the login page\r\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\r\n\r\n    const config = {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      withCredentials: true,\r\n    };\r\n\r\n    // send the action.payload as the body\r\n    // the config includes credentials which\r\n    // allow the server session to recognize the user\r\n    yield axios.post('/api/user/login', action.payload, config);\r\n\r\n    // after the user has logged in\r\n    // get the user information from the server\r\n    yield put({ type: 'FETCH_USER' });\r\n  } catch (error) {\r\n    console.log('Error with user login:', error);\r\n    if (error.response.status === 401) {\r\n      // The 401 is the error status sent from passport\r\n      // if user isn't in the database or\r\n      // if the username and password don't match in the database\r\n      yield put({ type: 'LOGIN_FAILED' });\r\n    } else {\r\n      // Got an error that wasn't a 401\r\n      // Could be anything, but most common cause is the server is not started\r\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\r\n    }\r\n  }\r\n}\r\n\r\n// worker Saga: will be fired on \"LOGOUT\" actions\r\nfunction* logoutUser(action) {\r\n  try {\r\n    const config = {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      withCredentials: true,\r\n    };\r\n\r\n    // the config includes credentials which\r\n    // allow the server session to recognize the user\r\n    // when the server recognizes the user session\r\n    // it will end the session\r\n    yield axios.post('/api/user/logout', config);\r\n\r\n    // now that the session has ended on the server\r\n    // remove the client-side user object to let\r\n    // the client-side code know the user is logged out\r\n    yield put({ type: 'UNSET_USER' });\r\n  } catch (error) {\r\n    console.log('Error with user logout:', error);\r\n  }\r\n}\r\n\r\nfunction* loginSaga() {\r\n  yield takeLatest('LOGIN', loginUser);\r\n  yield takeLatest('LOGOUT', logoutUser);\r\n}\r\n\r\nexport default loginSaga;\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Will be fired on \"REGISTER\" action\r\n * @param {Object} action Action payload that holds the username password for a new user\r\n * It will then log them in after if no errors, then sets it to redux state to allow the component to show\r\n * */\r\n\r\nfunction* registerUser(action) {\r\n  try {\r\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\r\n\r\n    // passes the username and password from the payload to the server\r\n    yield axios.post('/api/user/register', action.payload);\r\n\r\n    // automatically log a user in after registration\r\n    yield put({ type: 'LOGIN', payload: action.payload });\r\n\r\n    yield put({ type: 'SET_TO_LOGIN_MODE' });\r\n  } catch (error) {\r\n    console.log('Error with user registration:', error);\r\n    yield put({ type: 'REGISTRATION_FAILED' });\r\n  }\r\n}\r\n\r\nfunction* registrationSaga() {\r\n  yield takeLatest('REGISTER', registerUser);\r\n}\r\n\r\nexport default registrationSaga;\r\n","import axios from 'axios';\r\nimport { put, takeLatest } from 'redux-saga/effects';\r\n\r\n/**\r\n * Fetches uses info from the DB to use auth\r\n * Config includes credentials which allows the server session to recognize the user.\r\n * If logged in this will return their info from server in req.user\r\n */\r\n\r\nfunction* fetchUser() {\r\n  try {\r\n    const config = {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      withCredentials: true,\r\n    };\r\n    const response = yield axios.get('/api/user', config);\r\n    yield put({ type: 'SET_USER', payload: response.data });\r\n  } catch (error) {\r\n    console.log('User get request failed', error);\r\n  }\r\n}\r\n\r\nfunction* userSaga() {\r\n  yield takeLatest('FETCH_USER', fetchUser);\r\n}\r\n\r\nexport default userSaga;\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n//Generator used to get total counts for plans from api/planCount\r\nfunction* fetchTotalCounts() {\r\n  try {\r\n    const response = yield axios.get(`/api/planCount`);\r\n    yield put({ type: 'SET_PLAN_COUNT', payload: response.data });\r\n    console.log('plan index', response.data);\r\n  } catch (error) {\r\n    console.log('error with plan count get in planCount.saga', error);\r\n  }\r\n} //end fetchTotalCounts\r\n\r\n//Generator used to call /data and get a json object of counts for varies documents then saved in a reducer\r\nfunction* fetchTotalActions() {\r\n  try {\r\n    const response = yield axios.get(`/api/data/totalactions`);\r\n    yield put({ type: 'SET_TOTAL_ACTIONS', payload: response.data });\r\n  } catch (error) {\r\n    console.log('Error with getting total actions in saga: ', error);\r\n  }\r\n} //end fetchTotalCounts\r\n\r\n//Generator used to get total users by month from api/userOvertime\r\nfunction* getUsersByMonth(action) {\r\n  try {\r\n    const response = yield axios.get(\r\n      `/api/userOverTime/${action.payload.year}`\r\n    );\r\n    yield put({ type: 'SET_MONTHLY_USERS', payload: response.data });\r\n    console.log(response.data);\r\n  } catch (error) {\r\n    console.log('Error with getting monthlyUsers:', error);\r\n  }\r\n}\r\n\r\nfunction* operationalSaga() {\r\n  yield takeEvery('GET_USERS_BY_MONTH', getUsersByMonth);\r\n  yield takeEvery('FETCH_PLAN_COUNTS', fetchTotalCounts);\r\n  yield takeEvery('FETCH_TOTAL_ACTIONS', fetchTotalActions);\r\n}\r\n\r\nexport default operationalSaga;\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction* fetchImperatorData() {\r\n  try {\r\n    const response = yield axios.get(`/api/imperator`);\r\n    yield put({ type: 'SET_IMPERATOR', payload: response.data });\r\n    console.log(response.data);\r\n  } catch (error) {\r\n    console.log(`Error in saga getting imperator data:`, error);\r\n  }\r\n} //end fetchImperatorData\r\n\r\nfunction* fetchCompanySearch(action) {\r\n  try {\r\n    const response = yield axios.get(`/api/imperator/search/${action.payload}`);\r\n    yield put({ type: 'SET_IMPERATOR', payload: response.data });\r\n    console.log(response.data);\r\n  } catch (error) {\r\n    console.log(`Error in saga getting imperator data:`, error);\r\n  }\r\n}\r\n\r\nfunction* imperatorSaga() {\r\n  yield takeEvery('FETCH_IMPERATOR', fetchImperatorData);\r\n  yield takeEvery('FETCH_COMPANY_SEARCH', fetchCompanySearch);\r\n}\r\n\r\nexport default imperatorSaga;\r\n","import { put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction* getSingleCompanyData(action){\r\n  try {\r\n    const response = yield axios.get(`/api/analytics/${action.param.id}`);\r\n    yield put({ type: 'FETCH_SINGLE_COMPANY_USERS', param: {id: action.param.id }});\r\n    yield put({ type: 'SET_SINGLE_COMPANY_DATA', payload: response.data });\r\n  } catch (error) {\r\n    console.log(`Error in saga getting single company data:`, error);\r\n  }\r\n}\r\n\r\nfunction* editCustomerId(action){\r\n  try{\r\n    yield axios.put(`/api/analytics/${action.payload.companyId}`, action.payload) \r\n    yield put({ type: 'FETCH_SINGLE_COMPANY_DATA', param: {id: action.payload.companyId}})\r\n  }catch (error) {\r\n    console.log('Error in edit CID (singleCompanySaga)', error)\r\n  }\r\n}\r\n\r\nfunction* fetchCompanyUsers(action){\r\n  try {\r\n    const response = yield axios.get(`/api/analytics/users/${action.param.id}`);\r\n    yield put({ type: 'SET_SINGLE_COMPANY_USERS', payload: response.data });\r\n  } catch (error) {\r\n    console.log(`Error in saga getting company users:`, error);\r\n  }\r\n}\r\n\r\nfunction* singleCompanySaga() {\r\n  yield takeEvery('FETCH_SINGLE_COMPANY_DATA', getSingleCompanyData);\r\n  yield takeEvery('EDIT_CUSTOMER_ID', editCustomerId)\r\n  yield takeEvery('FETCH_SINGLE_COMPANY_USERS', fetchCompanyUsers);\r\n}\r\n\r\nexport default singleCompanySaga;","import axios from 'axios';\r\nimport { takeEvery } from 'redux-saga/effects';\r\n\r\n// POST ROUTE - to reset password \r\nfunction* resetPassword(action) {\r\n    try {\r\n      yield axios.post('api/reset', action.payload);\r\n    } catch (error) {\r\n      console.log('Error in index password reset:', error);\r\n    }\r\n} // end resetPassword\r\n\r\nfunction* passwordResetSaga() {\r\n  yield takeEvery('RESET_PASSWORD', resetPassword);\r\n}\r\n\r\nexport default passwordResetSaga;","import { put, takeEvery } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\n//Strategic Graph for average plan length by types\r\nfunction* getPlanAverage() {\r\n  try {\r\n    const response = yield axios.get(`/api/strategic`);\r\n    yield put({ type: 'SET_PLAN_LENGTH_AVERAGE', payload: response.data });\r\n  } catch (error) {\r\n    console.log('error with getPlanAverage in strategic.saga', error);\r\n  }\r\n} //end getPlanAverage\r\n\r\n//Get all paid plans expiring this month\r\nfunction* getPaidPlans() {\r\n  try {\r\n    const response = yield axios.get(`/api/strategic/paid`);\r\n    yield put({ type: 'SET_PAID_PLANS', payload: response.data });\r\n  } catch (error) {\r\n    console.log('error with getPaidPlans in strategic.saga', error);\r\n  }\r\n} //end getPaidPlans\r\n\r\n//Get all trial plans expiring this month\r\nfunction* getTrialPlans() {\r\n  try {\r\n    const response = yield axios.get(`/api/strategic/trial`);\r\n    yield put({ type: 'SET_TRIAL_PLANS', payload: response.data });\r\n  } catch (error) {\r\n    console.log('error with getTrialPlans in strategic.saga', error);\r\n  }\r\n} //end getTrialPlans\r\n\r\n// POST ROUTE - to email client from strategic plan\r\nfunction* sendEmail(action) {\r\n  try {\r\n    yield axios.post('api/email', action.payload);\r\n  } catch (error) {\r\n    console.log('Error in sendEmail saga:', error);\r\n  }\r\n} // end resetPassword\r\n\r\nfunction* strategicSaga() {\r\n  yield takeEvery('GET_PLAN_LENGTH_AVERAGE', getPlanAverage);\r\n  yield takeEvery('GET_PAID_PLANS', getPaidPlans);\r\n  yield takeEvery('GET_TRIAL_PLANS', getTrialPlans);\r\n  yield takeEvery('SEND_EMAIL', sendEmail)\r\n}\r\n\r\nexport default strategicSaga;","import axios from 'axios';\r\nimport { takeEvery, put } from 'redux-saga/effects';\r\n\r\n\r\nfunction* fetchUserByEmail(action) {\r\n    try {\r\n      const response = yield axios.get(`/api/analytics/all/${action.payload}`);\r\n      yield put({ type: 'SET_AURELIUS_USERS_SEARCH', payload: response.data })\r\n    } catch (error) {\r\n      console.log('Error in analytical user search', error);\r\n    }\r\n} \r\n\r\nfunction* editUserEmail(action) {\r\n  try {\r\n    yield axios.put(`/api/analytics/all/`, action.payload);\r\n    yield put({ type: 'FETCH_AURELIUS_USER', payload: action.payload.search })\r\n  } catch (error) {\r\n    console.log('Error in edit user email saga (analyticalAllUserSearch saga)', error)\r\n  }\r\n}\r\n\r\nfunction* analyticalUserSearchSaga() {\r\n  yield takeEvery('FETCH_AURELIUS_USER', fetchUserByEmail);\r\n  yield takeEvery('EDIT_USER_EMAIL', editUserEmail);\r\n}\r\n\r\nexport default analyticalUserSearchSaga;","import { all } from 'redux-saga/effects';\r\nimport loginSaga from './login.saga';\r\nimport registrationSaga from './registration.saga';\r\nimport userSaga from './user.saga';\r\nimport operationalSaga from './operational.saga';\r\nimport imperatorSaga from './imperator.saga';\r\nimport singleCompanySaga from './singleCompany.saga'\r\nimport passwordResetSaga from './passwordReset.saga';\r\nimport strategicSaga from './strategic.saga';\r\nimport analyticalUserSearchSaga from './analyticsAllUserSearch.saga';\r\n\r\n// rootSaga is the primary saga.\r\n// It bundles up all of the other sagas so our project can use them.\r\n// This is imported in index.js as rootSaga\r\n\r\n// some sagas trigger other sagas, as an example\r\n// the registration triggers a login\r\n// and login triggers setting the user\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    loginSaga(), \r\n    registrationSaga(), \r\n    userSaga(), \r\n    operationalSaga(), \r\n    imperatorSaga(),\r\n    singleCompanySaga(),\r\n    passwordResetSaga(),\r\n    strategicSaga(),\r\n    analyticalUserSearchSaga(),\r\n  ]);\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport './Nav.css';\r\n//  login\r\nimport { AiOutlineLogin } from 'react-icons/ai';\r\n// operational\r\nimport { BsFillGearFill } from 'react-icons/bs';\r\n// anyitcal\r\nimport { DiGoogleAnalytics } from 'react-icons/di';\r\n// strategic\r\nimport { SiMicrostrategy } from 'react-icons/si';\r\n// imperator\r\nimport { AiOutlineTable } from 'react-icons/ai';\r\n//logout\r\nimport { AiOutlineLogout } from 'react-icons/ai';\r\n//drawer open\r\nimport { BiRightArrow } from 'react-icons/bi';\r\n//drawer close\r\nimport { BiLeftArrow } from 'react-icons/bi';\r\n//register person\r\nimport { IoMdPersonAdd } from 'react-icons/io';\r\n\r\nconst Nav = (props) => {\r\n  const user = useSelector((redux) => redux.user);\r\n  const dispatch = useDispatch();\r\n  const [open, setOpen] = React.useState(false); // used for the drawer opening and closing\r\n\r\n  let loginLinkData = {\r\n    path: '/login',\r\n    text: 'Login',\r\n  };\r\n\r\n  if (user._id != null) {\r\n    loginLinkData.path = '/operational';\r\n    loginLinkData.text = 'Operational';\r\n  }\r\n\r\n  return (\r\n    <div className={open ? 'nav' : 'navOpen'}>\r\n      <div className='arrowContainer'>\r\n        {open ? (\r\n          <BiLeftArrow className='arrow' onClick={() => setOpen(!open)} />\r\n        ) : (\r\n          <BiRightArrow className='arrow' onClick={() => setOpen(!open)} />\r\n        )}\r\n      </div>\r\n      <div>\r\n        <img src='../img/logo.svg' alt='logo' className='nav-logo'></img>\r\n      </div>\r\n      <div className='nav-right'>\r\n        {user._id ? null : (\r\n          <>\r\n            <Link className='nav-link' to={loginLinkData.path}>\r\n              <AiOutlineLogin />\r\n              <span className='icon-btn'>{loginLinkData.text}</span>\r\n            </Link>\r\n            <div>\r\n              <Link className='nav-link' to='/registration'>\r\n                <IoMdPersonAdd />\r\n                <span className='icon-btn'>Register</span>\r\n              </Link>\r\n            </div>\r\n          </>\r\n        )}\r\n        {/* Show the link to the info page and the logout button if the user is logged in */}\r\n        {user._id && (\r\n          <>\r\n            <div>\r\n              <Link className='nav-link' to='/operational'>\r\n                <BsFillGearFill />\r\n                <span className='icon-btn'>Operational</span>\r\n              </Link>\r\n            </div>\r\n            <div>\r\n              <Link className='nav-link' to='/imperator'>\r\n                <AiOutlineTable />\r\n                <span className='icon-btn'>Imperator</span>\r\n              </Link>\r\n            </div>\r\n            <div>\r\n              <Link className='nav-link' to='/analytical/all/1'>\r\n                <DiGoogleAnalytics />\r\n                <span className='icon-btn'>Analytical</span>\r\n              </Link>\r\n            </div>\r\n            <div>\r\n              <Link className='nav-link' to='/strategic'>\r\n                <SiMicrostrategy />\r\n                <span className='icon-btn'>Strategic</span>\r\n              </Link>\r\n            </div>\r\n            <div>\r\n              <Link\r\n                className='nav-link'\r\n                onClick={() => dispatch({ type: 'LOGOUT' })}\r\n              >\r\n                <AiOutlineLogout />\r\n                <span className='icon-btn'>Log Out</span>\r\n              </Link>\r\n            </div>\r\n          </>\r\n        )}\r\n        {/* Always show this link since the about page is not protected */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport './LoginForm.css';\r\n\r\ntype Props = {\r\n  className?: string | undefined;\r\n};\r\n\r\ninterface IUser {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface IError {\r\n  errors: {\r\n    loginMessage: string;\r\n    registrationMessage: string;\r\n  };\r\n}\r\n\r\nconst LoginForm: React.FC<Props> = () => {\r\n  const dispatch = useDispatch();\r\n  const [user, setUser] = useState<IUser>({ username: '', password: '' });\r\n  const errors = useSelector((redux: IError) => redux.errors);\r\n  const history = useHistory();\r\n\r\n  const login = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault();\r\n    console.log('user', user);\r\n    const { username, password } = user;\r\n    if (username && password) {\r\n      dispatch({\r\n        type: 'LOGIN',\r\n        payload: {\r\n          username: user.username,\r\n          password: user.password,\r\n        },\r\n      });\r\n    } else {\r\n      dispatch({ type: 'LOGIN_INPUT_ERROR' });\r\n    }\r\n  }; // end login\r\n\r\n  return (\r\n    <div className='login'>\r\n      <form className='formPanel' onSubmit={login}>\r\n        <img src='../img/logo.svg' alt='logo' className='nav-logo2'></img>\r\n        <h2>Login</h2>\r\n        {errors.loginMessage && (\r\n          <h3 className='alert' role='alert'>\r\n            {errors.loginMessage}\r\n          </h3>\r\n        )}\r\n        <div>\r\n          <label htmlFor='username'>\r\n            Username:\r\n            <input\r\n              className='loginForm'\r\n              type='text'\r\n              name='username'\r\n              required\r\n              value={user.username}\r\n              onChange={(e) => setUser({ ...user, username: e.target.value })}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor='password'>\r\n            Password:\r\n            <input\r\n              className='loginForm'\r\n              type='password'\r\n              name='password'\r\n              required\r\n              value={user.password}\r\n              onChange={(e) => setUser({ ...user, password: e.target.value })}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <Link className='linkBtn' to='/passwordReset'>\r\n            Forgot Password?\r\n          </Link>\r\n          <Link\r\n              className=\"linkBtnReg\"\r\n              to='/registration'>\r\n                Register\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <button className='btn' type='submit' name='submit' value='Log In'>\r\n            Login\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport LoginForm from '../LoginForm/LoginForm';\r\nimport '../LoginForm/LoginForm.css'\r\n\r\nconst LoginPage: React.FC = () => {\r\n  return (\r\n    <div className='loginContainer'>\r\n      <LoginForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","const mapStoreToProps = (reduxState) => {\r\n  return {\r\n    // reduxState properties bound to \"props.store\"\r\n    // ---------\r\n    store: reduxState,\r\n  };\r\n};\r\n\r\nexport default mapStoreToProps;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport LoginPage from '../LoginPage/LoginPage';\r\nimport mapStoreToProps from '../../redux/mapStoreToProps';\r\n\r\n// A Custom Wrapper Component -- This will keep our code DRY.\r\n// Responsible for watching redux state, and returning an appropriate component\r\n// API for this component is the same as a regular route\r\n\r\n// THIS IS NOT SECURITY! That must be done on the server\r\n// A malicious user could change the code and see any view\r\n// so your server-side route must implement real security\r\n// by checking req.isAuthenticated for authentication\r\n// and by checking req.user for authorization\r\n\r\nconst ProtectedRoute = (props) => {\r\n  // Using destructuring, this takes ComponentToProtect from component\r\n  // prop and grabs all other props to pass them along to Route\r\n  const {\r\n    // Alias prop 'component' as 'ComponentToProtect'\r\n    component: ComponentToProtect,\r\n    // redirect path to be used if the user is authorized\r\n    authRedirect,\r\n    store,\r\n    ...otherProps\r\n  } = props;\r\n\r\n  let ComponentToShow;\r\n\r\n  if (store.user._id) {\r\n    // if the user is logged in (only logged in users have ids)\r\n    // show the component that is protected\r\n    ComponentToShow = ComponentToProtect;\r\n  } else {\r\n    // if they are not logged in, check the loginMode on Redux State\r\n    // if the mode is 'login', show the LoginPage\r\n    ComponentToShow = LoginPage;\r\n  }\r\n\r\n  // redirect a logged in user if an authRedirect prop has been provided\r\n  if (store.user._id && authRedirect != null) {\r\n    return <Redirect exact from={otherProps.path} to={authRedirect} />;\r\n  } else if (!store.user._id && authRedirect != null) {\r\n    ComponentToShow = ComponentToProtect;\r\n  }\r\n\r\n  // We return a Route component that gets added to our list of routes\r\n  return (\r\n    <Route\r\n      // all props like 'exact' and 'path' that were passed in\r\n      // are now passed along to the 'Route' Component\r\n      {...otherProps}\r\n      component={ComponentToShow}\r\n    />\r\n  );\r\n};\r\n\r\nexport default connect(mapStoreToProps)(ProtectedRoute);\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport './RegisterForm.css';\r\n\r\nconst RegisterForm = () => {\r\n  const errors = useSelector((store) => store.errors);\r\n  const dispatch = useDispatch();\r\n  const initState = {\r\n    username: '',\r\n    password: '',\r\n  };\r\n  const [newUser, setNewUser] = useState(initState);\r\n\r\n  const registerUser = (event) => {\r\n    event.preventDefault();\r\n    const { username, password } = newUser;\r\n    if (username && password) {\r\n      dispatch({\r\n        type: 'REGISTER',\r\n        payload: {\r\n          username,\r\n          password,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='register'>\r\n      <form className='formPanel' onSubmit={registerUser}>\r\n        <img src='../img/logo.svg' alt='logo' className='nav-logo2'></img>\r\n        <h2>Register</h2>\r\n        {errors.registrationMessage && (\r\n          <h3 className='alert' role='alert'>\r\n            {errors.registrationMessage}\r\n          </h3>\r\n        )}\r\n        <div>\r\n          <label htmlFor='username'>\r\n            Username:\r\n            <input\r\n              type='text'\r\n              name='username'\r\n              className='registerForm'\r\n              value={newUser.username}\r\n              required\r\n              onChange={(e) =>\r\n                setNewUser({ ...newUser, username: e.target.value })\r\n              }\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor='password'>\r\n            Password:\r\n            <input\r\n              type='password'\r\n              name='password'\r\n              className='registerForm'\r\n              value={newUser.password}\r\n              required\r\n              onChange={(e) =>\r\n                setNewUser({ ...newUser, password: e.target.value })\r\n              }\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          &nbsp;\r\n            <Link\r\n              className=\"linkBtnLogin\"\r\n              to='/login'>\r\n                Login\r\n            </Link>\r\n        </div>\r\n        <div>\r\n          <input className='btn' type='submit' name='submit' value='Register' />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport RegisterForm from '../RegisterForm/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  \r\n  return (\r\n    <div className='registerContainer'>\r\n      <RegisterForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\nconst BarGraph = () => {\r\n  const dispatch = useDispatch();\r\n  const totalActionData = useSelector((store) => store.totalAction);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'FETCH_TOTAL_ACTIONS' });\r\n  }, []);\r\n\r\n  const [opt, setOptions] = useState({\r\n    options: {\r\n      chart: {\r\n        id: 'basic-bar',\r\n        type: 'bar',\r\n        height: 350,\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: true,\r\n          distributed: true,\r\n        },\r\n      },\r\n      colors: ['#2EA2B2', '#0B354D', '#EE5F1B', '#8a97a5dc', '#09588E'],\r\n      dataLabels: {\r\n        enabled: false,\r\n        offsetY: -15,\r\n        style: {\r\n          fontSize: '12px',\r\n          colors: ['rgb(33, 44, 46)'],\r\n        },\r\n      },\r\n      series: [],\r\n      xaxis: {\r\n        categories: ['Documents', 'Hashtags', 'Insights', 'Notes', 'Projects'],\r\n        position: 'bottom',\r\n        axisBorder: {\r\n          show: false,\r\n        },\r\n        axisTicks: {\r\n          show: false,\r\n        },\r\n        labels: {\r\n          style: {\r\n            colors: '#212C2E',\r\n          },\r\n        },\r\n      },\r\n      crosshairs: {\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            colorFrom: '#D8E3F0',\r\n            colorTo: '#BED1E6',\r\n            stops: [0, 100],\r\n            opacityFrom: 0.4,\r\n            opacityTo: 0.5,\r\n          },\r\n        },\r\n      },\r\n      legend: {\r\n        show: false,\r\n      },\r\n    },\r\n  });\r\n  return (\r\n    <div>\r\n      <ReactApexChart\r\n        options={opt.options}\r\n        series={[\r\n          {\r\n            name: 'total actions',\r\n            data: [\r\n              432,\r\n              105,\r\n              300,\r\n              666,\r\n              900,\r\n              /*\r\n               * TODO\r\n               * uncomment these when deployed to client as their database is set up for this style!\r\n               * and remove the fake data above used as a placeholder for presentation.\r\n               */\r\n              // totalActionData.documents.count,\r\n              // totalActionData.hashtags.count,\r\n              // totalActionData.insights.count,\r\n              // totalActionData.notes.count,\r\n              // totalActionData.projects.count,\r\n            ],\r\n          },\r\n        ]}\r\n        type='bar'\r\n        width='100%'\r\n        height='350'\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default BarGraph;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Chart from 'react-apexcharts';\r\n\r\nexport const MonthlyUsers = () => {\r\n  const [year, setYear] = useState(2021);\r\n  const monthlyUsersOverTime = useSelector(\r\n    (redux) => redux.monthlyUsersOverTime\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getUsersByMonth();\r\n  }, [year]);\r\n\r\n  const [user, setUser] = useState({});\r\n\r\n  const getUsersByMonth = () => {\r\n    dispatch({ type: 'GET_USERS_BY_MONTH', payload: { year: year } });\r\n  };\r\n\r\n  const [opt, setOptions] = useState({\r\n    options: {\r\n      series: [\r\n        {\r\n          name: `Added Users By Month (${year})`,\r\n          data: [],\r\n        },\r\n      ],\r\n      chart: {\r\n        type: 'area',\r\n        height: 350,\r\n        zoom: {\r\n          enabled: false,\r\n        },\r\n      },\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n      stroke: {\r\n        curve: 'straight',\r\n      },\r\n      labels: [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec',\r\n      ],\r\n      yaxis: {\r\n        opposite: true,\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'left',\r\n      },\r\n      colors: ['#2EA2B2'],\r\n    },\r\n  });\r\n\r\n  const monthsData = monthlyUsersOverTime;\r\n\r\n  return (\r\n    <>\r\n      <div style={{ textAlign: 'left', padding: '10px' }}>\r\n        <select\r\n          className='pagSelect'\r\n          onChange={(e) => {\r\n            setYear(e.target.value);\r\n          }}\r\n        >\r\n          {[2021, 2020, 2019, 2018, 2017, 2016, 2015].map((year) => (\r\n            <option value={year}>{year}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <Chart\r\n        options={opt.options}\r\n        series={[\r\n          {\r\n            ...opt.options.series,\r\n            name: `Added Users By Month (${year})`,\r\n            data: monthsData,\r\n          },\r\n        ]}\r\n        type='area'\r\n        width='99%'\r\n        height='350'\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Chart from 'react-apexcharts';\r\n\r\nconst PlanTypeGraph = () => {\r\n  const dispatch = useDispatch();\r\n  const planCount = useSelector((redux) => redux.planCount)\r\n  const [year, setYear] = useState(2021)\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'FETCH_PLAN_COUNTS' })\r\n\r\n  }, [])\r\n\r\n  const [opt, setOpt] = useState({\r\n    options: {\r\n      chart: {\r\n        height: 280,\r\n        type: \"donut\",\r\n\r\n      },\r\n      series: [],\r\n      plotOptions: {\r\n        donut: {\r\n          dataLabels: {\r\n            total: {\r\n              show: true,\r\n              label: 'Total Plan Breakdown'\r\n            }\r\n          },\r\n        },\r\n      },\r\n      colors: ['#2EA2B2', '#0B354D', '#EE5F1B', '#8a97a5dc'],\r\n      labels: ['Pro', 'Premium', 'Enterprise', 'Trial']\r\n    }\r\n  })\r\n\r\n  const planTotal = planCount.reduce((total, item) => {\r\n    return total + item.count\r\n  }, 0)\r\n\r\n  const enterprisePercentage = (planCount[0]?.count / planTotal) * 100;\r\n  const trialPercentage = (planCount[1]?.count / planTotal) * 100;\r\n  const premiumPercentage = (planCount[2]?.count / planTotal) * 100;\r\n  const proPercentage = (planCount[3]?.count / planTotal) * 100;\r\n\r\n  return (\r\n    <div>\r\n      <Chart options={opt.options} series={\r\n        [\r\n          proPercentage,\r\n          premiumPercentage,\r\n          enterprisePercentage,\r\n          trialPercentage\r\n        ]\r\n      }\r\n        type='donut'\r\n        width='100%'\r\n        height='400'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlanTypeGraph;","import React from 'react';\r\nimport BarGraph from './BarGraph';\r\nimport { MonthlyUsers } from './MonthlyUsers';\r\nimport PlanTypeGraph from './PlanTypeGraph.js';\r\nimport './Operational.css';\r\n\r\nconst Operational = () => {\r\n  return (\r\n    <div className='flexbox'>\r\n      <div className='gridbox1'>\r\n        <div className='headerArea'>\r\n          <h1>Operational</h1>\r\n        </div>\r\n        <div className='barGraph'>\r\n          <h4 className=\"title\">Total Actions All Companies</h4>\r\n          <BarGraph />\r\n        </div>\r\n        <div className='planGraph'>\r\n          <h4 className=\"title\">Plan Type Percentages</h4>\r\n          <PlanTypeGraph />\r\n        </div>\r\n        <div className='monthlyGraph'>\r\n          <h4 className=\"title\">New Monthly Users</h4>\r\n          <MonthlyUsers />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Operational;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useRouteMatch } from 'react-router-dom';\r\nimport Chart from 'react-apexcharts';\r\n\r\n// single company graph\r\nconst SingleCompanyGraph = () => {\r\n  const location = useRouteMatch();\r\n  const allCompanyData = useSelector((store) => store.totalAction);\r\n  const singleCompanyData = useSelector((store) => store.singleCompanyData);\r\n  const dispatch = useDispatch();\r\n  const companyUsers = useSelector((redux) => redux.singleCompanyUsers);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: 'FETCH_SINGLE_COMPANY_DATA',\r\n      param: { id: location.params.id },\r\n    });\r\n    dispatch({ type: 'FETCH_TOTAL_ACTIONS' });\r\n  }, []);\r\n\r\n  const [opt, setOpt] = useState({\r\n    series: [\r\n      {\r\n        name: 'Average company',\r\n      },\r\n      {\r\n        name: 'This Company',\r\n      },\r\n    ],\r\n    options: {\r\n      chart: {\r\n        type: 'bar',\r\n        height: 350,\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: false,\r\n          columnWidth: '55%',\r\n          endingShape: 'rounded',\r\n        },\r\n      },\r\n      colors: ['#09588E', '#EE5F1B'],\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n      stroke: {\r\n        show: true,\r\n        width: 2,\r\n        colors: ['transparent'],\r\n      },\r\n      xaxis: {\r\n        categories: [\r\n          'Projects',\r\n          'Insights',\r\n          'Documents',\r\n          'Hashtags',\r\n          'Notes',\r\n          'Total',\r\n        ],\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: 'Actions',\r\n        },\r\n      },\r\n      fill: {\r\n        opacity: 1,\r\n      },\r\n      tooltip: {\r\n        y: {\r\n          formatter: function (val) {\r\n            return val;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const allCompanyActions = [\r\n    allCompanyData.projects.count / allCompanyData.Total_Companies,\r\n    allCompanyData.insights.count / allCompanyData.Total_Companies,\r\n    allCompanyData.documents.count / allCompanyData.Total_Companies,\r\n    allCompanyData.hashtags.count / allCompanyData.Total_Companies,\r\n    allCompanyData.notes.count / allCompanyData.Total_Companies,\r\n    allCompanyData.hashtags.count / allCompanyData.Total_Companies +\r\n      allCompanyData.documents.count / allCompanyData.Total_Companies +\r\n      allCompanyData.insights.count / allCompanyData.Total_Companies +\r\n      allCompanyData.notes.count / allCompanyData.Total_Companies +\r\n      allCompanyData.projects.count / allCompanyData.Total_Companies,\r\n  ];\r\n  const singleCompanyActions = [\r\n    singleCompanyData.projectsTotal,\r\n    singleCompanyData.insightsTotal,\r\n    singleCompanyData.documentsTotal,\r\n    singleCompanyData.hashtagsTotal,\r\n    singleCompanyData.notesTotal,\r\n    singleCompanyData.hashtagsTotal +\r\n      singleCompanyData.documentsTotal +\r\n      singleCompanyData.insightsTotal +\r\n      singleCompanyData.notesTotal +\r\n      singleCompanyData.projectsTotal,\r\n  ];\r\n\r\n  const companyName = companyUsers[0]?.company;\r\n\r\n  return (\r\n    <>\r\n      {/* this is where we pass the company name  */}\r\n      <h4 className='title'>Actions For {companyName}</h4>\r\n      <Chart\r\n        options={opt.options}\r\n        series={[\r\n          {\r\n            name: 'Average Aurelius Actions',\r\n            data: [6, 7, 5, 10, 15, 44],\r\n          },\r\n          {\r\n            name: `${singleCompanyData.company} Actions`,\r\n            data: singleCompanyActions,\r\n          },\r\n        ]}\r\n        type='bar'\r\n        height={350}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleCompanyGraph;\r\n","import React, { useState } from 'react'\r\nimport {useDispatch} from 'react-redux';\r\nimport './Analytical.css'\r\nimport Swal from 'sweetalert2';\r\n\r\nconst UserCard = (props) => {\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false) \r\n    const { firstname, lastname, company, email } = props.item\r\n    const [newEmail, setNewEmail] = useState('')\r\n\r\n\r\n    const editUserEmail = (initEmail, newEmail, firstname, lastname) => {\r\n        Swal.fire({\r\n            title: 'Wait!',\r\n            text: `Are you sure you want to change the email from ${initEmail} to ${newEmail} for ${firstname} ${lastname}?`,\r\n            icon: 'warning',\r\n            heightAuto: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            cancelButtonText: 'Cancel'\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                Swal.fire(\r\n                    'Success!',\r\n                    'Email Updated',\r\n                    'success',\r\n                    false\r\n                ) // end Swal IF\r\n                dispatch({ type: 'EDIT_USER_EMAIL', payload: {initEmail: initEmail, newEmail: newEmail, search: props.search}})\r\n                setEditMode(!editMode)\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                Swal.fire(\r\n                    'Cancelled',\r\n                    'Email not updated',\r\n                    'error',\r\n                    false\r\n                )\r\n            } //end else if\r\n        }) // end Swal .then\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {company} \r\n            </div>    \r\n            <div>\r\n                {firstname} {lastname}\r\n            </div>\r\n            {editMode ? \r\n            <>\r\n                <input \r\n                    type='text'\r\n                    onChange={(e) => setNewEmail(e.target.value)} \r\n                    className='editInput'\r\n                    />\r\n                <button className='updateEditBtn' onClick={() => editUserEmail(email, newEmail, firstname, lastname)}>Edit Email</button>\r\n                <button className='updateEditBtn' onClick={() => setEditMode(!editMode)}>Cancel</button>\r\n            </>\r\n            :\r\n            <>\r\n                {email}\r\n                <button className='updateEditBtn' onClick={() => setEditMode(!editMode)}>Update</button>\r\n            </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserCard;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport UserCard from './userCard';\r\nimport './Analytical.css';\r\n\r\nconst AllUserSearch = () => {\r\n  const dispatch = useDispatch();\r\n  const userSearch = useSelector((store) => store.aureliusUserSearch)  \r\n  const [search, setSearch] = useState('');  \r\n  \r\n\r\n  const searchAllUsers = () => {\r\n    dispatch({ type: 'FETCH_AURELIUS_USER', payload: search });\r\n  };\r\n\r\n  const clearAllUsers = () => {\r\n    dispatch({ type: 'CLEAR_USER_SEARCH' });\r\n    setSearch('')\r\n\r\n}\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            <input \r\n                className=\"input\" \r\n                placeholder=\"Search Users By Email\" \r\n                onChange={(e) => setSearch(e.target.value)} \r\n                value={search}\r\n            />\r\n            <button className='btnI' onClick={clearAllUsers}>\r\n                Clear\r\n            </button>\r\n            <button className='btnI' onClick={searchAllUsers}>\r\n                Find\r\n            </button>\r\n        </div>\r\n        <div className='allCardContainer'>\r\n            {userSearch.map((item, i) => {\r\n            return (\r\n                <div className='singleCardContainer' key={i}>\r\n                <UserCard item={item} search={search} />\r\n                </div>\r\n            );\r\n            })}\r\n        </div>\r\n        </>\r\n  );\r\n};\r\n\r\nexport default AllUserSearch;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Chart from 'react-apexcharts';\r\n\r\nconst AllCompanyGraph = () => {\r\n  \r\n  const totalActionData = useSelector((store) => store.totalAction);\r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    dispatch({ type: 'FETCH_TOTAL_ACTIONS' });\r\n  }, []); \r\n  \r\n  const [opt, setOpt] = useState({\r\n    series: [{\r\n      name: 'Average company',\r\n    }],\r\n    options: {\r\n      chart: {\r\n        type: 'bar',\r\n        height: 350\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: false,\r\n          columnWidth: '55%',\r\n          endingShape: 'rounded'\r\n        },\r\n      },\r\n      colors: ['#09588E'],\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        show: true,\r\n        width: 2,\r\n        colors: ['transparent']\r\n      },\r\n      xaxis: {\r\n        categories: ['Projects', 'Insights', 'Documents', 'Hashtags', 'Notes', 'Total']\r\n      },\r\n      yaxis: {\r\n        title: {\r\n          text: 'Actions'\r\n        }\r\n      },\r\n      fill: {\r\n        opacity: 1\r\n      },\r\n      tooltip: {\r\n        y: {\r\n          formatter: function () {\r\n            return \"Actions\"\r\n          }\r\n        }\r\n      }\r\n    }})\r\n\r\n    const actions = [\r\n      totalActionData.projects.count,\r\n      totalActionData.insights.count,\r\n      totalActionData.documents.count,\r\n      totalActionData.hashtags.count,\r\n      totalActionData.notes.count,\r\n      (totalActionData.hashtags.count + totalActionData.documents.count + totalActionData.insights.count + totalActionData.notes.count + totalActionData.projects.count)\r\n    ]\r\n  return (\r\n    <>\r\n      <h4 className=\"title\">Average Company Actions</h4>\r\n      <Chart options={opt.options} series={[\r\n        { \r\n          ...opt.series,\r\n          data: actions\r\n        }\r\n        ]} type=\"bar\" height={350} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AllCompanyGraph;\r\n\r\n\r\n\r\n\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport swal from 'sweetalert';\r\n\r\n// to use this button component pass the tag 1 or 2 props\r\n// 1. type,         type can be 'user' or company =============> <GDPRDeleteButton type='company'/>\r\n// 2. userEmail     if type is user pass a prop of user email with the users email. <GDPRDeleteButton type='user' userEmail='example@example.io'/>\r\n\r\nconst GDPRDeleteButton = (props) => {\r\n  const [buttonProperties, setButtonProperties] = useState('');\r\n  const [buttonInputValue, setButtonInputValue] = useState('');\r\n  const singleCompanyData = useSelector((store) => store.singleCompanyData);\r\n\r\n  useEffect(() => {\r\n    if (props.type === 'company') {\r\n      setButtonProperties('gdprBtnCompany');\r\n      setButtonInputValue(singleCompanyData.company);\r\n    } else if (props.type === 'user') {\r\n      setButtonProperties('gdprBtnUser');\r\n      setButtonInputValue(props.userEmail);\r\n    }\r\n  }, []);\r\n\r\n  const deleteCompany = () => {\r\n    swal({\r\n      title: 'Warning',\r\n      text:\r\n        'GDPR Delete is irreversible, all company data including users, projects, and billing will be completely deleted. This action is final.',\r\n      dangerMode: true,\r\n      buttons: true,\r\n    }).then(() =>\r\n      swal({\r\n        title: 'Final Warning',\r\n        text: `Enter the ${buttonInputValue} to delete`,\r\n        content: {\r\n          element: 'input',\r\n        },\r\n        // text: 'GDPR Delete is irreversible, all company data including users, projects, and billing will be completely deleted',\r\n        dangerMode: true,\r\n        buttons: true,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <button className={buttonProperties} onClick={deleteCompany}>\r\n      GDPR DELETE\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default GDPRDeleteButton;\r\n","import { useSelector } from 'react-redux';\r\nimport GDPRDeleteButton from './GDPRDeleteButton';\r\n\r\nconst AnalyticalUsers = () => {\r\n  const companyUsers = useSelector((redux) => redux.singleCompanyUsers);\r\n\r\n  return (\r\n    <>\r\n      <div className='userTitle'>USER LIST FOR {companyUsers[0]?.company}</div>\r\n      <ul>\r\n        {companyUsers.map((user) => {\r\n          return (\r\n            <div className='userRoot' key={user.users_data._id}>\r\n              <li className='userLi'>{user.users_data.name}</li>\r\n              <li className='userLi'>{user.users_data.email}</li>\r\n              <li className='userLi'>\r\n                <GDPRDeleteButton\r\n                  type='user'\r\n                  userEmail={user.users_data.email}\r\n                />\r\n              </li>\r\n            </div>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnalyticalUsers;\r\n","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Moment from 'react-moment';\r\nimport GDPRDeleteButton from './GDPRDeleteButton';\r\nimport './Analytical.css';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst CompanyInfo = () => {\r\n  const dispatch = useDispatch();\r\n  const companyInfo = useSelector((store) => store.singleCompanyData);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [customerId, setCustomerId] = useState('');\r\n\r\n  const editCustomerId = (companyName, initCustomerId, customerId) => {\r\n    Swal.fire({\r\n      title: 'Wait!',\r\n      text: `Are you sure you want to change the Customer ID for ${companyName} from ${initCustomerId} to ${customerId}?`,\r\n      icon: 'warning',\r\n      heightAuto: false,\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Yes',\r\n      cancelButtonText: 'Cancel'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        Swal.fire(\r\n            'Success!',\r\n            'Customer ID Updated',\r\n            'success',\r\n            false\r\n        ) // end Swal IF\r\n    dispatch({\r\n      type: 'EDIT_CUSTOMER_ID',\r\n      payload: {\r\n        initCustomerId: companyInfo.billing.customerId,\r\n        customerId: customerId,\r\n        companyId: companyInfo._id,\r\n      },\r\n    });\r\n    setEditMode(!editMode);\r\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n        Swal.fire(\r\n          'Cancelled',\r\n          'Customer ID not updated',\r\n          'error',\r\n          false\r\n      )\r\n  } //end else if\r\n}) // end Swal .then\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className='coTitle'>COMPANY: {companyInfo.company}</div>\r\n      <div className='billingInfo'>\r\n        <h4 className='billingHeader1'>BILLING INFORMATION</h4>\r\n        <p>Plan: {companyInfo.billing?.plan} </p>\r\n        <p>Status: {companyInfo.billing?.status}</p>\r\n        {editMode ? \r\n          <>\r\n            <input \r\n              onChange={(e) => setCustomerId(e.target.value)} \r\n              type='text' \r\n              />\r\n            <button className=\"editBtn\" onClick={() => editCustomerId(companyInfo.company, companyInfo.billing?.customerId, customerId)}>Edit ID</button>\r\n            <button className=\"editBtn\" onClick={() =>setEditMode(!editMode)}>Cancel</button>\r\n          </> :\r\n           <>Customer ID: {companyInfo.billing?.customerId}</>\r\n        }\r\n        {editMode ? null : \r\n            <button className=\"editBtn\" onClick={() => setEditMode(!editMode)}>Update</button>\r\n        }\r\n        <p>\r\n          Active Until:{' '}\r\n          <Moment format='MM/DD/YYYY'>{companyInfo.activeUntil}</Moment>\r\n        </p>\r\n        {companyInfo.jira && <p>Configuration: JIRA</p>}\r\n        {companyInfo.zapier && <p>Configuration: ZAPIER</p>}\r\n        <div className='gdprHolderCompany'>\r\n          <GDPRDeleteButton type='company' />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default CompanyInfo;\r\n","import './Analytical.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRouteMatch } from 'react-router-dom';\r\nimport SingleCompanyGraph from './singleCompanyGraph';\r\nimport AllUserSearch from './allUserSearch';\r\nimport AllCompanyGraph from './allCompanyGraph';\r\nimport AnalyticalUsers from './AnalyticalUsers';\r\nimport CompanyInfo from './companyInfo';\r\n\r\nconst Analytical = () => {\r\n  const location = useRouteMatch();\r\n  const [graph, setGraph] = useState();\r\n  const [companyInfo, setCompanyInfo] = useState();\r\n  const [allUserSearch, setAllUserSearch] = useState();\r\n\r\n  useEffect(() => {\r\n    checkSingleOrAll();\r\n  }, []);\r\n\r\n  const checkSingleOrAll = () => {\r\n    if (location.params.type === 'single') {\r\n      setGraph(<SingleCompanyGraph />);\r\n      setCompanyInfo(<CompanyInfo />);\r\n      setAllUserSearch(<AllUserSearch />);\r\n    } else if (location.params.type === 'all') {\r\n      setGraph(<AllCompanyGraph />);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className='flexbox4'>\r\n        <div className='gridbox4'>\r\n          <div className='headerArea'>\r\n            <h1>Analytical</h1>\r\n          </div>\r\n          <div className='userSearch'>{allUserSearch}</div>\r\n          <div className='companyArea'>{companyInfo}</div>\r\n          {location.params.type === 'single' ? (\r\n            <div className='userArea'>\r\n              {location.params.type === 'single' && <AnalyticalUsers />}\r\n            </div>\r\n          ) : null}\r\n          {/* TODO need to add a way to load some type of data or hide the page */}\r\n          <div className='barGraph2'>{graph}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Analytical;\r\n","import React from 'react';\r\nimport { useTable, usePagination, useSortBy } from 'react-table';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Moment from 'react-moment';\r\nimport { DiGoogleAnalytics } from 'react-icons/di';\r\n\r\nconst Table = ({ data, pageCount: controlledPageCount }) => {\r\n  const history = useHistory();\r\n\r\n  //rendering of configurations in table column\r\n  const getConfig = (imperator) => {\r\n    if (imperator.jira && imperator.zapier) {\r\n      return 'JIRA & ZAPIER';\r\n    } else if (imperator.jira && !imperator.zapier) {\r\n      return 'JIRA';\r\n    } else if (imperator.zapier && !imperator.jira) {\r\n      return 'ZAPIER';\r\n    }\r\n  };\r\n  //table headers - accessor references data keys in imperator reducer\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'COMPANY INFO',\r\n        className: 'title',\r\n        columns: [\r\n          {\r\n            Header: 'COMPANY NAME',\r\n            accessor: 'company',\r\n            Cell: ({ cell }) => (\r\n              <span className='company'>\r\n                {cell.row.values.company}\r\n                <button\r\n                  className='coBtn'\r\n                  onClick={() => goToAnalytical(cell.row.values._id)}\r\n                >\r\n                  <DiGoogleAnalytics />\r\n                  &nbsp; Details\r\n                </button>\r\n              </span>\r\n            ),\r\n          },\r\n          {\r\n            Header: 'BILLING PLAN',\r\n            accessor: 'billing.plan',\r\n          },\r\n          {\r\n            Header: 'BILLING STATUS',\r\n            accessor: 'billing.status',\r\n          },\r\n          {\r\n            Header: 'ACTIVE UNTIL',\r\n            accessor: 'activeUntil',\r\n            Cell: (props) => {\r\n              const custom_date = formatData(props.value);\r\n              return (\r\n                <span>\r\n                  <Moment format='MM/DD/YY'>{custom_date}</Moment>\r\n                </span>\r\n              );\r\n            },\r\n          },\r\n          {\r\n            Header: 'CONFIGURATIONS',\r\n            accessor: getConfig,\r\n          },\r\n          {\r\n            Header: 'PROJECTS',\r\n            accessor: 'projects total',\r\n          },\r\n          {\r\n            Header: 'NOTES',\r\n            accessor: 'notes total',\r\n          },\r\n          {\r\n            Header: 'RECS',\r\n            accessor: 'recommendations total',\r\n          },\r\n          {\r\n            Header: 'INSIGHTS',\r\n            accessor: 'insights total',\r\n          },\r\n          {\r\n            Header: 'HASHTAGS',\r\n            accessor: 'hashtags total',\r\n          },\r\n          {\r\n            Header: 'COLLECTIONS',\r\n            accessor: 'collections total',\r\n          },\r\n          {\r\n            Header: 'DOCUMENTS',\r\n            accessor: 'documents total',\r\n          },\r\n          {\r\n            Header: 'USERS',\r\n            accessor: 'total users',\r\n          },\r\n          {\r\n            Header: '_id',\r\n            accessor: '_id',\r\n            className: 'companyId',\r\n            Cell: ({ cell }) => (\r\n              <span className='companyId' aria-hidden='true'>\r\n                {cell.row.values._id}\r\n              </span>\r\n            ),\r\n            style: { display: 'none' },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  //pagination, table props, sort feature\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    {\r\n      initialState: { pageIndex: 0 },\r\n      columns,\r\n      data,\r\n    },\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  //format active until date\r\n  const formatData = (date) => {\r\n    date = date.split('T');\r\n    return new Date(Date.parse(date))\r\n      .toString()\r\n      .replace(/ \\w+-\\d+ \\(.*\\)$/, '');\r\n  };\r\n\r\n  //details button - routes to specific company clicked\r\n  const goToAnalytical = (id) => {\r\n    history.push(`/analytical/single/${id}`);\r\n  };\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <table {...getTableProps()} className='table'>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th\r\n                  {...column.getHeaderProps([\r\n                    { className: column.className, style: column.style },\r\n                    column.getSortByToggleProps(),\r\n                  ])}\r\n                >\r\n                  {column.render('Header')}\r\n                  {/* Add a sort direction indicator */}\r\n                  <span className='sortArrow'>\r\n                    {column.isSorted ? (column.isSortedDesc ? ' ▼' : ' ▲') : ''}\r\n                  </span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td\r\n                      {...cell.getCellProps([\r\n                        {\r\n                          className: cell.column.className,\r\n                          style: cell.column.style,\r\n                        },\r\n                      ])}\r\n                    >\r\n                      {cell.render('Cell')}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className='pagination'>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}{' '}\r\n          </strong>\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            className='pagInput'\r\n            type='number'\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          className='pagSelect'\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Table from './Table';\r\nimport './Imperator.css';\r\n\r\nconst Imperator = () => {\r\n  const dispatch = useDispatch();\r\n  const imperator = useSelector((redux) => redux.imperator);\r\n  const [search, setSearch] = useState('');\r\n  const [pageCount, setPageCount] = React.useState(0);\r\n\r\n  //get all companies data on page load\r\n  useEffect(() => {\r\n    dispatch({ type: 'FETCH_IMPERATOR' });\r\n  }, []);\r\n\r\n  //get search results\r\n  const searchCo = () => {\r\n    dispatch({ type: 'FETCH_COMPANY_SEARCH', payload: search });\r\n    setSearch('');\r\n  };\r\n\r\n  //clear button, get all companies back\r\n  const clearSearch = () => {\r\n    dispatch({ type: 'FETCH_IMPERATOR' });\r\n  };\r\n\r\n  return (\r\n    <div className='flexbox2'>\r\n      <div className='gridbox2'>\r\n        <div className='headerArea'>\r\n          <h1>Imperator</h1>\r\n        </div>\r\n        <div className='imperator-card'>\r\n          <div className='search-imperator'>\r\n            <input\r\n              className='search-input'\r\n              placeholder='Search Company Name'\r\n              value={search}\r\n              onChange={(e) => setSearch(e.target.value)}\r\n            />\r\n            <button\r\n              className='btnI'\r\n              type='submit'\r\n              name='submit'\r\n              value='Clear'\r\n              onClick={clearSearch}\r\n            >\r\n              Clear\r\n            </button>\r\n            <button\r\n              className='btnI'\r\n              type='submit'\r\n              name='submit'\r\n              value='Find'\r\n              onClick={searchCo}\r\n            >\r\n              Find\r\n            </button>\r\n          </div>\r\n          <div className='tableGrid'>\r\n            <Table data={imperator} pageCount={pageCount} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Imperator;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\nfunction StrategicGraph() {\r\n  const dispatch = useDispatch();\r\n  const strategicGraph = useSelector((redux) => redux.strategic.strategicGraph);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'GET_PLAN_LENGTH_AVERAGE' });\r\n  }, [])\r\n\r\n  const [opt, setOptions] = useState({\r\n    series: [{\r\n      data: []\r\n    }],\r\n    options: {\r\n      chart: {\r\n        type: 'bar',\r\n        height: 350\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          horizontal: true,\r\n        },\r\n      },\r\n      colors: ['#2EA2B2'],\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      xaxis: {\r\n        categories: ['Trial', 'Pro', 'Premium', 'Enterprise'],\r\n        labels: {\r\n          style: {\r\n            colors: ['#212C2E'],\r\n          },\r\n        },\r\n      },\r\n      yaxis: {\r\n        categories: ['Days'],\r\n        labels: {\r\n          style: {\r\n            colors: ['#212C2E'],\r\n            fontSize: '.75rem'\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  let enterprise = strategicGraph[0]?.avgLength\r\n  let premium = strategicGraph[1]?.avgLength\r\n  let pro = strategicGraph[2]?.avgLength\r\n  let trial = strategicGraph[3]?.avgLength\r\n\r\n\r\n  return (\r\n    <div className=\"strategic\">\r\n      <div className=\"app\">\r\n        <div className=\"row\">\r\n          <div className=\"mixed-chart\">\r\n            <ReactApexChart\r\n              options={opt.options}\r\n              series={[\r\n                {\r\n                  name: 'Average Length of Plan by Days',\r\n                  data: [\r\n                    30, pro, premium, enterprise\r\n                  ],\r\n                },\r\n              ]}\r\n              type='bar'\r\n              width='100%'\r\n              height='350'\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StrategicGraph;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport StrategicGraph from './StrategicGraph';\r\n\r\nimport './Strategic.css';\r\n\r\nfunction Strategic() {\r\n  const dispatch = useDispatch();\r\n  const strategic = useSelector((redux) => redux.strategic.strategicGraph.strategicGraph);\r\n  const paidPlan = useSelector((redux) => redux.strategic.paidPlans);\r\n  const trialPlan = useSelector((redux) => redux.strategic.trialPlans);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'GET_PLAN_LENGTH_AVERAGE' });\r\n    dispatch({ type: 'GET_PAID_PLANS' });\r\n    dispatch({ type: 'GET_TRIAL_PLANS' });\r\n  }, [])\r\n\r\n  const sendEmail = (id) => {\r\n    dispatch({ type: 'SEND_EMAIL', payload: id });\r\n  }\r\n\r\n  return (\r\n    <div className=\"flexbox\">\r\n\r\n      <div className=\"gridbox\">\r\n        <div className=\"headerArea\">\r\n          <h1>Strategic</h1>\r\n        </div>\r\n\r\n        <div className=\"strategicGraph\">\r\n          <h4 className=\"titles\">Average Plan Length By Types</h4>\r\n          <StrategicGraph />\r\n        </div>\r\n\r\n        <div className=\"paidContainer\">\r\n          <h4 className=\"titles\">Paid Plans Ending This Month</h4>\r\n          {paidPlan.map(plan => {\r\n            return (\r\n              <p className=\"col1\">{plan.company}\r\n                <span className=\"col2\">{plan.month}/{plan.day}/{plan.year}\r\n                  <button\r\n                    className=\"emailBtn\"\r\n                    onClick={() => sendEmail(plan._id)}>\r\n                    Email\r\n                    </button>\r\n                </span>\r\n              </p>\r\n            )\r\n          }\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"trialContainer\">\r\n          <h4 className=\"titles\">Trials Ending This Month</h4>\r\n          {trialPlan.map(plan => {\r\n            return (\r\n              <p className=\"col1\">{plan.company}\r\n                <span className=\"col2\">{plan.month}/{plan.day}/{plan.year}\r\n                  <button\r\n                    onClick={() => sendEmail(plan._id)}\r\n                    className=\"emailBtn\">\r\n                    Email\r\n                </button>\r\n                </span>\r\n              </p>\r\n            )\r\n          }\r\n          )}\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Strategic;\r\n\r\n","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport swal from 'sweetalert';\r\nimport './PasswordReset.css';\r\n\r\ninterface IEmail {\r\n    email: string,\r\n    confirm: string\r\n}\r\n\r\ninterface SwalOptions {\r\n    title?: string,\r\n    text?: string,\r\n    icon?: string,\r\n}\r\n\r\nconst PasswordReset: React.FC<SwalOptions> = () => {\r\n    const [email, setEmail] = useState<IEmail>({ email: '', confirm: '' })\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const reset = () => {\r\n        console.log('Clicked reset password', email);\r\n        if (email.email === email.confirm) {\r\n            dispatch({ type: 'RESET_PASSWORD', payload: email });\r\n            setEmail({ email: '', confirm: '' });\r\n            swal({\r\n                title: \"Thank you!\",\r\n                text: \"You will receive an email to reset your password.\",\r\n                icon: \"success\",\r\n            });\r\n        } else {\r\n            swal({\r\n                title: \"Whoops!\",\r\n                text: \"Please ensure email is accurate\",\r\n                icon: \"warning\",\r\n            });\r\n        }\r\n    }\r\n\r\n    const returnToLogin = () => {\r\n        history.push('/login');\r\n    }\r\n\r\n    return (\r\n        <div className='resetContainer'>\r\n            <div className=\"reset\">\r\n                <form className='formPanel'>\r\n                    <img src=\"../img/logo.svg\" alt=\"logo\" className=\"nav-logo2\"></img>\r\n                    <h2>Password Reset</h2>\r\n                    <div>\r\n                        <label htmlFor='email'>\r\n                            Email:\r\n                    <input\r\n                                className=\"loginForm\"\r\n                                type='text'\r\n                                name='email'\r\n                                required\r\n                                value={email.email}\r\n                                onChange={(e) => setEmail({ ...email, email: e.target.value })}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor='email'>\r\n                            Confirm Email:\r\n                    <input\r\n                                className=\"loginForm\"\r\n                                type='text'\r\n                                name='confirm'\r\n                                required\r\n                                value={email.confirm}\r\n                                onChange={(e) => setEmail({ ...email, confirm: e.target.value })}\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"buttonContainer\">\r\n                        <button className='btnReset' onClick={returnToLogin}>Return to Login</button>\r\n                        <button\r\n                            className='btnReset'\r\n                            onClick={reset}\r\n                        >Reset</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PasswordReset;","import React, { useEffect } from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch,\r\n} from 'react-router-dom';\r\n\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport Nav from '../Nav/Nav';\r\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\r\nimport LoginPage from '../LoginPage/LoginPage';\r\nimport RegisterPage from '../RegisterPage/RegisterPage';\r\nimport Operational from '../Operational/Operational.js';\r\nimport Analytical from '../Analytical/Analytical.js';\r\nimport Imperator from '../Imperator/Imperator.js';\r\nimport Strategic from '../Strategic/Strategic.js';\r\nimport PasswordReset from '../PasswordReset/PasswordReset.tsx';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'FETCH_USER' });\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Nav />\r\n        <Switch>\r\n          {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\r\n          <Redirect exact from='/' to='/operational' />\r\n\r\n          {/* Visiting localhost:3000/about will show the about page. */}\r\n\r\n          <ProtectedRoute\r\n            exact\r\n            path='/operational'\r\n            component={Operational}\r\n          />\r\n\r\n          <ProtectedRoute\r\n            exact\r\n            path='/imperator'\r\n            component={Imperator}\r\n          />\r\n\r\n          <ProtectedRoute\r\n            exact\r\n            path='/strategic'\r\n            component={Strategic}\r\n          />\r\n\r\n          <ProtectedRoute\r\n            exact\r\n            path='/analytical/:type/:id'\r\n            component={Analytical}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path='/passwordReset'\r\n            component={PasswordReset}\r\n          />\r\n\r\n          {/* When a value is supplied for the authRedirect prop the user will\r\n            be redirected to the path supplied when logged in, otherwise they will\r\n            be taken to the component and path supplied. */}\r\n          <ProtectedRoute\r\n            // with authRedirect:\r\n            // - if logged in, redirects to \"/operational\"\r\n            // - else shows LoginPage at /login\r\n            exact\r\n            path='/login'\r\n            component={LoginPage}\r\n            authRedirect='/operational'\r\n          />\r\n          <ProtectedRoute\r\n            // with authRedirect:\r\n            // - if logged in, redirects to \"/operational\"\r\n            // - else shows RegisterPage at \"/registration\"\r\n            exact\r\n            path='/registration'\r\n            component={RegisterPage}\r\n            authRedirect='/operational'\r\n          />\r\n\r\n          {/* If none of the other routes matched, we will show a 404. */}\r\n          <Route render={() => <h1>404</h1>} />\r\n        </Switch>\r\n        {/* <Footer /> */}\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default connect()(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './redux/reducers/_root.reducer'; // imports ./redux/reducers/index.js\r\nimport rootSaga from './redux/sagas/_root.saga'; // imports ./redux/sagas/index.js\r\n\r\nimport App from './components/App/App';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n// this line creates an array of all of redux middleware you want to use\r\n// we don't want a whole ton of console logs in our production code\r\n// logger will only be added to your project if your in development mode\r\nconst middlewareList = process.env.NODE_ENV === 'development' ?\r\n  [sagaMiddleware, logger] :\r\n  [sagaMiddleware];\r\n\r\nconst store = createStore(\r\n  // tells the saga middleware to use the rootReducer\r\n  // rootSaga contains all of our other reducers\r\n  rootReducer,\r\n  // adds all middleware to our project including saga and logger\r\n  applyMiddleware(...middlewareList),\r\n);\r\n\r\n// tells the saga middleware to use the rootSaga\r\n// rootSaga contains all of our other sagas\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('react-root'),\r\n);\r\n"],"sourceRoot":""}